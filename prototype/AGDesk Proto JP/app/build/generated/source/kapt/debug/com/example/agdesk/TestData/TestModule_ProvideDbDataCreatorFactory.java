// Generated by Dagger (https://dagger.dev).
package com.example.agdesk.TestData;

import com.example.agdesk.repository.AssetRepository;
import com.example.agdesk.repository.NetworkRepository;
import com.example.agdesk.repository.TaskRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class TestModule_ProvideDbDataCreatorFactory implements Factory<dbDataCreator> {
  private final Provider<NetworkRepository> networkRepositoryProvider;

  private final Provider<AssetRepository> assetRepositoryProvider;

  private final Provider<TaskRepository> taskRepositoryProvider;

  public TestModule_ProvideDbDataCreatorFactory(
      Provider<NetworkRepository> networkRepositoryProvider,
      Provider<AssetRepository> assetRepositoryProvider,
      Provider<TaskRepository> taskRepositoryProvider) {
    this.networkRepositoryProvider = networkRepositoryProvider;
    this.assetRepositoryProvider = assetRepositoryProvider;
    this.taskRepositoryProvider = taskRepositoryProvider;
  }

  @Override
  public dbDataCreator get() {
    return provideDbDataCreator(networkRepositoryProvider.get(), assetRepositoryProvider.get(), taskRepositoryProvider.get());
  }

  public static TestModule_ProvideDbDataCreatorFactory create(
      Provider<NetworkRepository> networkRepositoryProvider,
      Provider<AssetRepository> assetRepositoryProvider,
      Provider<TaskRepository> taskRepositoryProvider) {
    return new TestModule_ProvideDbDataCreatorFactory(networkRepositoryProvider, assetRepositoryProvider, taskRepositoryProvider);
  }

  public static dbDataCreator provideDbDataCreator(NetworkRepository networkRepository,
      AssetRepository assetRepository, TaskRepository taskRepository) {
    return Preconditions.checkNotNullFromProvides(TestModule.INSTANCE.provideDbDataCreator(networkRepository, assetRepository, taskRepository));
  }
}
